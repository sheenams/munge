"""
Test the subcommand scripts 
"""

import os
from os import path
import unittest
import logging
import pprint
import csv
import sys
import json

from numpy import std, average

from munging.subcommands import summary
from munging.subcommands import annovar_bed_parser
from munging.subcommands import control_parser
from munging.subcommands import qc_variants
from munging.subcommands import quality_metrics
from munging.subcommands import varscanINDEL_to_annovar
from munging.subcommands import varscanSNP_to_annovar
from munging.subcommands import xlsmaker
from munging.subcommands import combined_cnv, combined_pindel, combined_output
from munging.utils import munge_path

from __init__ import TestBase
import __init__ as config
log = logging.getLogger(__name__)


summary_testfiles = path.join(config.datadir, 'summary/annovar_sum')
annovar_testfiles = path.join(config.datadir, 'annovar_bed_parser')
control_testfiles = path.join(config.datadir, 'control_parser')
qc_testfiles = path.join(config.datadir, 'qc_variants')
quality_testfiles = path.join(config.datadir, 'quality_metrics')
varscan_testfiles = path.join(config.datadir, 'varscan')
combined_testfiles = path.join(config.datadir, 'combined')

NM_list=['NM_001202435.1', 'NM_006772.1','NM_000038.5','NM_007300.1','NM_007297.2' ]
data1 = {'Gene':'SCN1A', 'Transcripts':'SCN1A:NM_001202435:exon18:c.3199G>A:p.A1067T,', 'Variant_Type':'','Var_Reads':'-1', 'Ref_Reads':'-1'}
data2 = {'Gene':'SYNGAP1', 'Transcripts':'SYNGAP1:NM_006772:exon11:c.1713G>A:p.S571S','Variant_Type':'upstream','Var_Reads':'10', 'Ref_Reads':'90'}
data3 = {'Gene':'BRCA1', 'Transcripts':'BRCA1:NM_007300:exon10:c.3113A>G:p.E1038G,BRCA1:NM_007297:exon9:c.2972A>G:p.E991G,BRCA1:NM_007294:exon10:c.3113A>G:p.E1038G', 'Variant_Type':''}
class TestSummary(TestBase):
    """
    Test the summary script with creates the Analysis.txt file from 
    annotations created with annovar.
    """

    def setUp(self):
        self.outdir = self.mkoutdir()

    def testMapHeaders(self):
        """
        Gets header(s) and info from each file
        """
        fname = path.join(summary_testfiles, 'OPX-240.variant_function')
        header_ids = {0: 'var_type_1',
                      1: 'gene',
                      7: 'zygosity',
                      12: 'rsid_1',
                      8: 'GATK_Score'}
        variant_idx = [2, 3, 4, 5, 6]
        out = summary.map_headers(fname, header_ids, variant_idx)
        out = list(out)
        self.assertTrue(len(out) == 782)
        header_keys = set(header_ids.values())
        # confirm that all keys in header_ids are contained in each row of the output
        for pos, data in out:
            self.assertFalse(header_keys - set(data.keys()))

    def testMungeGeneAndTranscripts(self):
        """
        Return modified values of (Gene, Transcripts). Note that
        his depends on 'Variant_Type' provided by munge_variant.
        """
        data1['Gene'], data1['Transcripts'], data1['c.'], data1['p.'] = summary.munge_gene_and_Transcripts(data1, NM_list)
        data2['Gene'], data2['Transcripts'], data2['c.'], data2['p.'] = summary.munge_gene_and_Transcripts(data2, NM_list)
        data3['Gene'], data3['Transcripts'], data3['c.'], data3['p.'] = summary.munge_gene_and_Transcripts(data3, NM_list)
        print 'data3', data3
        #Data 1 gene should be SCN1A
        self.assertTrue(data1['Gene'], 'SCN1A')
        self.assertTrue(data1['p.'], 'NM_001202435.1:p.A1067T')
        #Data 2 gene should be empyt as the Variant_Type is upstream, which we filter
        self.assertEqual(data2['Gene'], '')
        self.assertEqual(data2['c.'], 'NM_006772.1:c.1713G>A')
        
    def testGetAlleleFreq(self):
        """
        Return allele frequency of var_reads/ref_reads
        """
        freq1=summary.get_allele_freq(data1)
        freq2=summary.get_allele_freq(data2)
        self.assertEqual(freq1, 'NA')
        self.assertEqual(freq2, '0.10')

class TestAnnovarBedParser(TestBase):
    """
    Test the annovar_bed_parser which is used to filter the vcf/varscan/varscanSNP 
    files to include only the regions specified in the bed file for annotation
    """
    
    def testAnovarBedParserMatch(self):
        """
        Return list of variants found in both the bed file and the annA file in pipeline.
        Matches if chr is the same, ann[start] >= bed[start] AND ann[stop] <= bed[stop]
        """
        bedfname = open(path.join(annovar_testfiles, 'test.bed'))
        bedinfo = list(csv.reader(bedfname, delimiter='\t'))
        annfname = open(path.join(annovar_testfiles, 'test.annA'))
        anninfo = list(csv.reader(annfname, delimiter='\t'))
        output = annovar_bed_parser.match(bedinfo, anninfo)
        #There should be 4 lines in output 
        self.assertEqual(len(output), 4)
        #The second entry of the second line should be 672823
        self.assertEqual(output[1][1], '672823')
        
class TestControlParser(TestBase):
    """
    Test the control_parser which is used to check the control sample against
    SNVs found in NA12878 from Complete Genomics, 1000G and our samples
    """

    def testControlParserMatch(self):
        """
        Make a list and keep count of variants found in both the qc file 
        and the run output for LMG/OPX-240 sample
        Matches if chr, start are the same 
        control[chr] = run[chr] and control[start] = run[start]
        """
        controlfname = open(path.join(control_testfiles, 'OncoPlex_qc_variants_v3.txt'))
        controlinfo = list(csv.reader(controlfname, delimiter='\t'))
        runfname = open(path.join(control_testfiles, 'OPX-240_Analysis.txt'))
        runinfo = list(csv.reader(runfname, delimiter='\t'))
        output, count = control_parser.match(controlinfo, runinfo)
        #Count and output length should be qual 
        self.assertEqual(len(output), count)
        #The second entry of the second line should be MTHFR:NM_005957:exon8:c.1286A>C:p.E429A,
        self.assertEqual(output[1][1], 'MTHFR:NM_005957:exon8:c.1286A>C:p.E429A,')

class TestQCVariants(TestBase):
    """
    Test the qc_variants script which finds the intersection of 
    (1000G, Complete Genomes, LMG/OPX-240 output)
    to create versioned assay specific qc file 
    """

    def testQCVariantsMatch(self):
        """
        Return list of variants found in all three input files 
        (1000G, Complete Genomes, LMG/OPX-240 output)
        Matches if chrm, start, stop, ref_base, and var_base are the same.
        """
        pipefname = open(path.join(qc_testfiles, 'OPX-240.exonic_variant_function'))
        pipe = list(csv.reader(pipefname, delimiter="\t"))
        kgfname = open(path.join(qc_testfiles, 'NA12878.1000g.hg19.exonic_variant_function'))
        kg = list(csv.reader(kgfname, delimiter="\t"))
        cgfname = open(path.join(qc_testfiles, 'NA12878.CG.hg19.exonic_variant_function'))
        cg = list(csv.reader(cgfname, delimiter="\t"))
        output = qc_variants.match(pipe, kg, cg)
        #There should be 3 lines that match
        self.assertEqual(len(output), 3)
        #The second entry on the second line should be SYNGAP1:NM_006772:exon11:c.1713G>A:p.S571S
        self.assertEqual(str(output[1][1]), "SYNGAP1:NM_006772:exon11:c.1713G>A:p.S571S," )

class TestQualityMetrics(TestBase):
    """
    Test the quality_metrics script with reports the average read depth, 
    standard devation given the CNV_bins file and picard metrics file
    """

    def testGetValues(self):
        """
        Get the standard deviation from the tumor.rd.ori column in the CNV file
        """
        cnvfname = open(path.join(quality_testfiles, 'OPX-240_CNV_bins.txt'))
        cnv_info = csv.reader(cnvfname, delimiter="\t")
        metricfname = open(path.join(quality_testfiles, 'OPX-240.quality_metrics'))
        metric_info = csv.reader(metricfname, delimiter="\t")
        cnv_info.next()
        a=quality_metrics.get_values(cnv_info)
        stdev=["Standard deviation of read depth: %0.2f " %(a).std()]
        ave=["Average read depth: %0.2f " %average(a)]
        self.assertEqual(stdev,['Standard deviation of read depth: 120.25 '])
        self.assertEqual(ave,['Average read depth: 312.25 '])

class TestVarscanIndel(TestBase):
    """
    Test the varscanINDEL_to_annovar parser which cleans the 
    varscan file, including converting indel notation to bases, 
    removing 'chr' prefix, creating read counts
    """

    def testIndelCleaner(self):
        """
        Remove the unwanted info in the variant base column 
        of the varscan file for processing through annovar
        """
        varscanfname = open(path.join(varscan_testfiles, 'OPX-240.varscan'))
        varscaninfo = csv.reader(varscanfname, delimiter="\t")
        output = varscanINDEL_to_annovar.indel_cleaner(varscaninfo)
        for row in output:
            self.assertEqual(row[0],('1'))

class TestVarscanSNP(TestBase):
    """
    Test the varscanSNP_to_annovar parser, which cleans the 
    varscanSNP file, including converting from IUPAC, 
    removing 'chr' prefix, creating read counts
    """

    def testIUPACConverter(self):
        """
        Convert IUPAC to DNA bases, unless converted base is the same as the reference base
        """
        varscanfname = open(path.join(varscan_testfiles, 'OPX-240.varscanSNP'))
        varscaninfo = csv.reader(varscanfname, delimiter="\t")
        output = varscanSNP_to_annovar.IUPAC_converter(varscaninfo)
        for row in output:
            self.assertEqual(row[0],('1'))

class TestXlsmaker(TestBase):
    """
    Test the xlsmaker which combines all the analysis files
    into one workbook and renames sheets for clarity in sign out
    """

    def testfloatifpossible(self):
        """
        Convert integers to float instead of string where applicable.
        """
        test01='Gene'
        test02='12'
        self.assertTrue(xlsmaker.float_if_possible(test01),'Gene')
        self.assertTrue(xlsmaker.float_if_possible(test02),'12.0')

    def testProcessFiles(self):
        """
        Rename the analysis files for workbook
        """
        tab = '9_SNP_Indel'
        filetype = 'Analysis'
        files=[] 
        files.append(path.join(summary_testfiles, 'LMG-098A_Analysis.txt'))
        files.append(path.join(summary_testfiles,'LMG-098A_Quality_Analysis.txt'))
        data, fname = xlsmaker.process_files(files, tab, filetype) 
        self.assertEqual(data, '9_SNP_Indel')
        self.assertEqual(fname, 'testfiles/summary/annovar_sum/LMG-098A_Analysis.txt')
        self.assertNotEqual(fname, 'testfiles/summary/annovar_sum/LMG-098A_Quality_Analysis.txt')


    def testMungeTranscripts(self):
        """
        Return HGVS correct transcript annotations
        NM_006772.1:c.1713G>A
        """
        c1,p1=summary.munge_transcript(data1['Transcripts'], NM_list)
        c2,p2=summary.munge_transcript(data2['Transcripts'], NM_list)
        self.assertEqual(c1, 'NM_001202435.1:c.3199G>A')
        self.assertEqual(c2, 'NM_006772.1:c.1713G>A')
        self.assertEqual(p1, 'NM_001202435.1:p.A1067T')


# class TestCombinedCNV(TestBase):
#     """
#     Doesn't have separate functions currently
#     """
# class TestCombinedPindel(TestBase):
#     """
#     Doesn't have separate functions currently
#     """
#     def setUp(self):
#         pass

# class TestCombinedOutput(TestBase):
#     """
#     Doesn't have separate functions currently
#     """
#     def setUp(self):
#         pass



# class TestVariantCrawler(TestBase):
#     """
#     HOLD OFF:
#     May not use this script in the very near future
#     Function to get information from csv file and create dictionary to write output file
#     """
#     Def testGetInfo(self):
#         pass

# class TestCreateBed(TestBase):
#     """
#     Doesn't have separate functions currently
#     """
#     def setUp(self):
#         pass

# class TestDBAnnotation(TestBase):
#     """
#     Doesn't have separate functions currently
#     """
#     def setUp(self):
#         pass

# class TestFreqCreator(TestBase):
#     """
#     May change to not create annovar file
#     Doesn't have separate functions currently
#     """
#     def setUp(self):
#         pass

# class TestMSIControl(TestBase):
#     """
#     Doesn't have separate functions currently
#     """
#     def setUp(self):
#         pass

# class TestMSISamples(TestBase):
#     """
#     Doesn't have separate functions currently
#     """
#     def setUp(self):
#         pass

